//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/_Kaofish/Scripts/KaofishActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KaofishActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KaofishActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KaofishActions"",
    ""maps"": [
        {
            ""name"": ""KPlayer"",
            ""id"": ""c4c0b38a-3365-44d4-a293-5a08e8736283"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d11f4867-6694-4999-b6e7-e298b81704db"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b37f8938-78f4-4613-8db3-2827ac4a92d7"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KPlayer
        m_KPlayer = asset.FindActionMap("KPlayer", throwIfNotFound: true);
        m_KPlayer_Look = m_KPlayer.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KPlayer
    private readonly InputActionMap m_KPlayer;
    private List<IKPlayerActions> m_KPlayerActionsCallbackInterfaces = new List<IKPlayerActions>();
    private readonly InputAction m_KPlayer_Look;
    public struct KPlayerActions
    {
        private @KaofishActions m_Wrapper;
        public KPlayerActions(@KaofishActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_KPlayer_Look;
        public InputActionMap Get() { return m_Wrapper.m_KPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IKPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_KPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KPlayerActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IKPlayerActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IKPlayerActions instance)
        {
            if (m_Wrapper.m_KPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_KPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KPlayerActions @KPlayer => new KPlayerActions(this);
    public interface IKPlayerActions
    {
        void OnLook(InputAction.CallbackContext context);
    }
}
